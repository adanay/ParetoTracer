% Copyright (c) 2018 Adanay Martín & Oliver Schütze.
% This file is subject to the terms and conditions defined in
% the file 'LICENSE.txt', which is part of this source code package.

function [it] = traceit(it, minresult)
% If used without arguments, initializes the structure that represents one 
% iteration of the Pareto Tracer algorithm.
% Otherwise, updates the PT iteration values with those obtained by the 
% corrector phase. 

if nargin == 0
  % Lagrange multipliers
  w = struct(...
    'objectives', [],...
    'lower', [],...
    'upper', [],...
    'ineqlin', [],...
    'eqlin', [],...
    'ineqnonlin', [],...
    'eqnonlin', []);

  it = struct(...
    'x', [],...
    'fx', [],...
    'wfx', [],...
    'Jx', [],...
    'wJx', [],...
    'Jvx', [],...
    'Hx', [],...
    'Hident', [],...
    'Lx', [],...
    'Lmodif', [],...
    'Hwx', [],...
    'HwxRcond', [],...% rank or inv of the cond number of the restricted Hwx 
                   ...% (with the active dimensions regarding the box constraints removed)
    'ax', [],...
    'wax', [],...
    'aeqx', [],...
    'waeqx', [],...
    'cx', [],...
    'wcx', [],...
    'Jcx', [],...
    'wJcx', [],...
    'Hcx', [],...
    'Hcwx', [],...
    'ceqx', [],...
    'wceqx', [],...
    'Jceqx', [],...
    'wJceqx', [],...
    'Hceqx', [],...
    'Hceqwx', [],...
    'dceqx', [],... % square norm of the equalities
    'dcx', [],... % square norm of the inequalities
    'w', w,... % Lagrange multipliers
    'xActive', [],... % active dimensions regarding the box constraints
    'r', [],... % number of active dimensions regarding the box constraints
    'xLbActive', [],... % active dimensions regarding the lower bounds constraints
    'rLb', [],... % number of active dimensions regarding the lower bounds constraints
    'xUbActive', [],... % active dimensions regarding the upper bounds constraints
    'rUb', [],... % number of active dimensions regarding the upper bounds constraints
    'axActive', [],... % active linear inequalities
    'cxActive', [],... % active nonlinear inequalities 
    'Mu', [],... % Mu space
    'WRcond', [],...% rank or inv of the cond number of W = [J * Mu; [1...1 0...0]] 
                 ...% (with the active dimensions regarding the box constraints removed)
    'mu', [],... % mu directions
    'v', [],... % tangent directions
    'vIsSecant', false,...% determines whether v is a secant, i.e., it1.x - it0.x
    't', [],...% step length
    'cell', [],...% corresponding cell
    'cellinserted', [],...% true: the corresponding cell was inserted
                       ...% false: the cell already existed
    'index', []); % index in the result list (result.ps, result.pf)
else
  [it] = updtraceit(it, minresult);
end
end

function [it] = updtraceit(it, minresult)
it.x = minresult.x;
it.fx = minresult.fx;
it.Jx = minresult.Jx;
it.Hx = minresult.Hx;
it.Hident = minresult.Hident;
it.Lx = minresult.Lx;
it.Lmodif = minresult.Lmodif;
it.ax = minresult.ax;
it.aeqx = minresult.aeqx;
it.cx = minresult.cx;
it.Jcx = minresult.Jcx;
it.Hcx = minresult.Hcx;
it.ceqx = minresult.ceqx;
it.Jceqx = minresult.Jceqx;
it.Hceqx = minresult.Hceqx;
it.dceqx = minresult.dceqx;
it.dcx = minresult.dcx;
it.w = minresult.w;
end

